From c2cb63bd2ea02127aa75d6271add27c09b09344e Mon Sep 17 00:00:00 2001
From: Xiaoyao Li <xiaoyao.li@intel.com>
Date: Fri, 30 Jul 2021 17:06:24 +0800
Subject: [PATCH 086/101] i386/cpu: Split user_features into user_plus_features
 and user_minus_features

Split user_features into two arrays. In x86_cpu_expand_features, feature
minus comes after the feature plus. Then minus has precedence when users
add "+feature,-feature" at the same time. As a result, the splited
user_minus_features[] has precedence over user_plus_features[].

Signed-off-by: Xiaoyao Li <xiaoyao.li@intel.com>
---
 target/i386/cpu.c | 20 ++++++++++++++------
 target/i386/cpu.h |  3 ++-
 2 files changed, 16 insertions(+), 7 deletions(-)

diff --git a/target/i386/cpu.c b/target/i386/cpu.c
index cc333d9775..e1c6999c98 100644
--- a/target/i386/cpu.c
+++ b/target/i386/cpu.c
@@ -5234,10 +5234,12 @@ static void x86_cpu_load_model(X86CPU *cpu, X86CPUModel *model)
 
     /*
      * Properties in versioned CPU model are not user specified features.
-     * We can simply clear env->user_features here since it will be filled later
-     * in x86_cpu_expand_features() based on plus_features and minus_features.
+     * We can simply clear env->user_{plus/minus}_features here since it will
+     * be filled later in x86_cpu_expand_features() based on plus_features and
+     * minus_features.
      */
-    memset(&env->user_features, 0, sizeof(env->user_features));
+    memset(&env->user_plus_features, 0, sizeof(env->user_plus_features));
+    memset(&env->user_minus_features, 0, sizeof(env->user_minus_features));
 }
 
 static gchar *x86_gdb_arch_name(CPUState *cs)
@@ -6334,7 +6336,7 @@ void x86_cpu_expand_features(X86CPU *cpu, Error **errp)
              */
             env->features[w] |=
                 x86_cpu_get_supported_feature_word(w, cpu->migratable) &
-                ~env->user_features[w] &
+                ~env->user_minus_features[w] &
                 ~feature_word_info[w].no_autoenable_flags;
         }
     }
@@ -6346,7 +6348,7 @@ void x86_cpu_expand_features(X86CPU *cpu, Error **errp)
 
             /* Not an error unless the dependent feature was added explicitly.  */
             mark_unavailable_features(cpu, d->to.index,
-                                      unavailable_features & env->user_features[d->to.index],
+                                      unavailable_features & env->user_plus_features[d->to.index],
                                       "This feature depends on other features that were not requested");
 
             env->features[d->to.index] &= ~unavailable_features;
@@ -6820,12 +6822,18 @@ static void x86_cpu_set_bit_prop(Object *obj, Visitor *v, const char *name,
         return;
     }
 
+    /*
+     * As minus has precedence over plus, if the features exists both
+     * in user_plus_features and user_minus_features, the minus has
+     * the precedence.
+     */
     if (value) {
         cpu->env.features[fp->w] |= fp->mask;
+        cpu->env.user_plus_features[fp->w] |= fp->mask;
     } else {
         cpu->env.features[fp->w] &= ~fp->mask;
+        cpu->env.user_minus_features[fp->w] |= fp->mask;
     }
-    cpu->env.user_features[fp->w] |= fp->mask;
 }
 
 /* Register a boolean property to get/set a single bit in a uint32_t field.
diff --git a/target/i386/cpu.h b/target/i386/cpu.h
index 1fcef36269..7eb3a821fb 100644
--- a/target/i386/cpu.h
+++ b/target/i386/cpu.h
@@ -1786,7 +1786,8 @@ typedef struct CPUArchState {
     uint32_t cpuid_version;
     FeatureWordArray features;
     /* Features that were explicitly enabled/disabled */
-    FeatureWordArray user_features;
+    FeatureWordArray user_plus_features;
+    FeatureWordArray user_minus_features;
     uint32_t cpuid_model[12];
     /* Cache information for CPUID.  When legacy-cache=on, the cache data
      * on each CPUID leaf will be different, because we keep compatibility
-- 
2.39.2

